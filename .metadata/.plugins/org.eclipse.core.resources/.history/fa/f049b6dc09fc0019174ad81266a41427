/* ###################################################################
**     Filename    : rtos_main_task.c
**     Project     : labfinal
**     Processor   : MKL25Z128VLK4
**     Component   : Events
**     Version     : Driver 01.00
**     Compiler    : GNU C Compiler
**     Date/Time   : 2019-10-31, 15:51, # CodeGen: 2
**     Abstract    :
**         This is user's event module.
**         Put your event handler code here.
**     Settings    :
**     Contents    :
**         main_task - void main_task(os_task_param_t task_init_data);
**
** ###################################################################*/
/*!
** @file rtos_main_task.c
** @version 01.00
** @brief
**         This is user's event module.
**         Put your event handler code here.
*/         
/*!
**  @addtogroup rtos_main_task_module rtos_main_task module documentation
**  @{
*/         
/* MODULE rtos_main_task */

#include "Cpu.h"
#include "Events.h"
#include "rtos_main_task.h"

#ifdef __cplusplus
extern "C" {
#endif 


/* User includes (#include below this line is not maintained by Processor Expert) */

/* Initialization of Processor Expert components function prototype */
#ifdef MainTask_PEX_RTOS_COMPONENTS_INIT
extern void PEX_components_init(void);
#endif 

/*
** ===================================================================
**     Callback    : main_task
**     Description : Task function entry.
**     Parameters  :
**       task_init_data - OS task parameter
**     Returns : Nothing
** ===================================================================
*/
void main_task(os_task_param_t task_init_data)
{
  /* Write your local variable definition here */
  
  /* Initialization of Processor Expert components (when some RTOS is active). DON'T REMOVE THIS CODE!!! */
#ifdef MainTask_PEX_RTOS_COMPONENTS_INIT
  PEX_components_init(); 
#endif 
  /* End of Processor Expert components initialization.  */

#ifdef PEX_USE_RTOS
  while (1) {
#endif
    /* Write your code here ... */
    
    
    OSA_TimeDelay(10);                 /* Example code (for task release) */
   
    
    
    









    //Função para limpar a tela do terminal serial
    void LimpaTela(void)
    {
    	uint8_t i;

    	for(i = 0; i < 30; i++)
    		debug_printf();

    	debug_printf(“\r”);
    }

    int main(void)
    {
    	uint8_t Estado = 0;		//Controle da máquina de estados
    	uint8_t Opcao = 0;		//Recebe opção selecionada

    	while(1)
    	{
    		switch(Estado)
    		{
    		//Imprime Menu
    		case 0:
    			LimpaTela();	//Limpa a tela do terminal serial

    			//Apresenta o menu de configuração
    			debug_printf("Menu de Configuracao\r\n\n");
    			debug_printf("1 - Calibracao de sensores\r\n");
    			debug_printf("2 - Configuracao de canais de comunicacao\r\n");
    			debug_printf("3 - Teste de hardware\r\n\n");
    			debug_printf("OPCAO: ");

    			Estado = 1;		//Alterna para o estado de aguardar opção
    			break;

    		//Aguarda Seleção da opção e testa se é válida
    		case 1:
    			Opcao = debug_getchar();	//Espera uma tecla ser pressionada

    			LimpaTela();				//Limpa a tela do terminal serial

    			//Tratamento da opção selecionada
    			switch(Opcao)
    			{
    			case '1':
    				debug_printf("Calibracao de sensores\r\n\n");
    				debug_printf("1 - Sensor 1\r\n");
    				debug_printf("2 - Sensor 2\r\n");
    				debug_printf("3 - Sensor 3\r\n");
    				break;

    			case '2':
    				debug_printf("Configuracao de canais de comunicacao\r\n\n");
    				debug_printf("1 - Canal 1\r\n");
    				debug_printf("2 - Canal 2\r\n");
    				debug_printf("3 - Canal 3\r\n");
    				break;

    			case '3':
    				debug_printf("Teste de hardware\r\n\n");
    				debug_printf("1 - Saida 1\r\n");
    				debug_printf("2 - Saida 2\r\n");
    				debug_printf("3 - Saida 3\r\n");
    				break;

    			//Qualquer tecla diferente é uma opção inválida
    			default:
    				debug_printf("Opcao Invalida\r\n\n");
    				break;
    			}

    			OSA_TimeDelay(2000);	//Função de Delay criada pelo PE 2000ms

    			Estado = 0;				//Alterna para o estado de apresentação do menu
                break;
            }
        }
    }

































#ifdef PEX_USE_RTOS   
  }
#endif    
}

/* END rtos_main_task */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
